-> written simple language
Algorithm: Step by step procedure to finish a task.
1. Step form
2. Psedu code
3. Flow chart
Variable: a named storage container that stores values 
Datatype: the type of data that has been stored 
1. Int: Integer type
example: x=9
2. float: decimals
example : x=3.54
3. string: series of chacters
example: x="Swathi"
4. Boolean : True or False

# example program
#include<stdio.h>
void main()
{
int a,b;
printf("enter the values");
scanf("%d%d", &a,&b);
printf("addition:%d",a+b);
}

# example program
x= int(input("enter the value"))
y= int(input("enter the value"))
print(x+y)

Operators:The symbols that perform operation on operands
1. Arithematic operators: +,-,*,/,%
2. Logical: AND, OR, NOT

 a>b AND a>c
 
 
 
 
 a=int(input('enter the marks of student:')
if a>=90:
  print('A+')
elif a>=80 and a<90:
  print('A')
elif a>=70 and a<80:
  print('B')
elif a>=60 and a<70:
  print('C')
elif a>=50 and a<60:
  print('D')
elif a>=40 and a<50:
  print('e')
else:
  print('fail')
  
x=int(input('enter the year:')
if(x%4 == 0 and x%100 !=0) or (x%400 ==0):
  print('leapyear')
else:
  print('nonleapyear')
  
  
y=int(input('enter a number:')
if (y%2!=0 and y>0):
  print('odd')
elif y%2==0:
  print('even')
else:
  print('zero')
  
  

import re
z=input('enter the password:')
if(len(v)>=8):
  if(bool(re.match('((?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,30}),z))==True):
    print('the password is strong')
  elif(bool(re.match('((\d*)([a-z]*)([A-Z]*)([!@#$%^&*]*]*)',z))==True):
    print('weakpassword')
else:
  print('invalidpassword')
  
  

a=int(input('enter a number:'))
b=int(input('enter another number:'))
op=input(enter the operator :'))
if op== '+':
  print(a+b)
elif op == '-'
  print(a-b)
elif op == '*'
  ptint(a*b)
elif op == '/'
  print(a/b)
elif op == '%'
   print(a%b)
else:
  print('invalidnumber')
  
  
  
  e1  e2 output                          
  0   0    0
  1   0    0
  0   1    0
  1   1    1

a>b OR a>c
 e1  e2  output
 1   1     1
 1   0     1
 0   1     1
 0    0    0

NOT 
e1 output
1    0
0    1

3. relational:  >,<,>=,<=,==,!=
4. Unary: 
a=10;
a++; use and then increment by 1
++a; increment by 1 and then use it 


a=10
print(a)   #prints 10
a = a+1   #a+=1
print(a)   #prints 11
++a
print(a)   #prints 12

5. assignment: (=)

a=6 a==6
6. membership:
in   - true
not in   - false

7. Bitwise : performing operations from the bit level 
a. &( and)
b. |(or)
c. ^(XOR)
d. ~(Not)

8. identity:
is 
is not 


Conditional statements:

if(cond)
elif
else


example:

a=10
b=20
if a>b:
  print(" a is the greatest")
else:
  print(" b is the greatest")
 
 
 #write a program to find the greatest of 3 numbers 

a=int(input("Enter a value:"))
b=int(input("Enter b value:"))
c=int(input("Enter c value:"))
if a==b:
 print("both are same")
if a==c:
 print("both are same")
 if b==c:
 print("both are same")

if(a>b and a>c):
  print("a is greater")
elif(b>a and b>c):
  print("b is greater")
 elif(a==b or b==c or a==c):
  print("both are same)
else:
  printf("c is greater")
 
 
  
   #write a program to find the greatest of 3 numbers and return that 2 numbers are the same if 2 same numbers are given by the user,
   
   


